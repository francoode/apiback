<?php

namespace ApiBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use ApiBundle\Entity\User;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends EntityRepository
{
    /**
     * @param $apiKey
     *
     * @return User|null
     */
    public function getUserByApiKey($apiKey)
    {
        if (null == $apiKey) {
            return null;
        }

        $qb = $this->createQueryBuilder('u');

        $qb->join('u.apiKey', 'a');
        $qb->where('u.enabled = true')
            ->andWhere('a.access_key = :apiKey')
            ->setParameter('apiKey', $apiKey);

        $qb->setMaxResults(1);
        $result = $qb->getQuery()->getResult();

        return ((count($result) > 0) ? $result[0] : null);
    }

    /**
     * @param $refreshKey
     *
     * @return User|null
     */
    public function getUserByRefreshKey($refreshKey)
    {
        if (null == $refreshKey) {
            return null;
        }

        $qb = $this->createQueryBuilder('u');

        $qb->join('u.apiKey', 'a');
        $qb->where('u.enabled = true')
            ->andWhere('a.refresh_key = :refreshKey')
            ->setParameter('refreshKey', $refreshKey);

        $qb->setMaxResults(1);
        $result = $qb->getQuery()->getResult();

        return ((count($result) > 0) ? $result[0] : null);
    }

    /**
     * @param $userName
     *
     * @return User
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getUserByUserName($userName)
    {
        if (null == $userName) {
            return null;
        }

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.username = :username')
            ->setParameter('username', $userName)
            ->setMaxResults(1);

        try {
            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * @param $userName
     *
     * @return User
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getUserByUserNameOrEmail($userName)
    {
        if (null == $userName) {
            return null;
        }

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.username = :username or u.email = :username')
            ->setParameter('username', $userName)
            ->setMaxResults(1);

        try {
            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * @param $roles
     *
     * @return array
     */
    public function findUsersByRoles($roles)
    {
        if (empty($roles)) {
            return [];
        }

        $qb = $this->createQueryBuilder('u');
        $i = 0;
        $parameters = [];
        foreach ($roles as $key => $role) {
            $qb->orWhere('u.roles LIKE ?'.$i++);
            $parameters[] = '%'.$role.'%';
        }
        $qb->setParameters($parameters);

        try {
            return $qb->getQuery()->getResult();
        } catch (NoResultException $ex) {
            return [];
        }
    }

    public function findOneDeleted($email)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where('u.email = :email')
            ->setParameter('email', $email);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function searchUser($search)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where($qb->expr()->like('u.fullName', $qb->expr()->literal('%'.strtolower($search).'%')));
        $qb->orWhere($qb->expr()->like('u.username', $qb->expr()->literal('%'.strtolower($search).'%')));

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $requester
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllQueryBuilder(User $requester)
    {
        return $this->createQueryBuilder('u')
            ->andWhere('u.username != :admin')
            ->setParameter('userId', $requester->getId())
            ->setParameter('admin', 'admin');
    }

    /**
     * Searchs by id, cuit or email
     * @param string $slug
     *
     * @return User|null
     */
    public function findOneBySlug($slug)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.id = :slug')
            ->orWhere('u.email = :slug')
            ->setParameter('slug', $slug);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getUserByProductorCuit($cuit)
    {
        $qb = $this->createQueryBuilder('u')
            ->join('u.productor', 'p')
            ->where('p.cuit = :cuit')
            ->setParameter('cuit', $cuit);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
